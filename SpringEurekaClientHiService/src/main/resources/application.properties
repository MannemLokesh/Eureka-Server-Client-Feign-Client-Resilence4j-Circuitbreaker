server.port=9999
spring.application.name=Hi-Service
# Inorder to access the endpoints, we have to add actuator dependancy and we have to expose the endpoint
management.endpoints.web.exposure.include=*
# Registering the Circut breaker end points to the Actuator  --> /actuator/circuitbreakers
resilience4j.circuitbreaker.configs.default.register-health-indicator=true
# Minimun number of calls allowed to hit the sayHello Circuit breaker is 5
resilience4j.circuitbreaker.instances.sayHello.minimum-number-of-calls=5
# We had set the below one to 50% so if the failure rate greater or equal to 50% that means if 2 or 3 calls are failed
resilience4j.circuitbreaker.instances.sayHello.failure-rate-threshold=50
# if the 50% requests are failed than the circuit will be opened and it will stay in open state to 30 seconds
resilience4j.circuitbreaker.instances.sayHello.wait-duration-in-open-state=30000
# When 30 seconds is over than it will comes back to Half-Open state. If 1 call is failed than again it will goes to Open state. becaue we had set failure rate
# to 50%
resilience4j.circuitbreaker.instances.sayHello.permitted-number-of-calls-in-half-open-state=2
# You can also ignore some exceptions so that if those exceptions are raised than won't consider it as failure. So it won't increase the failure rate
resilience4j.circuitbreaker.instances.sayHello.ignore-exceptions=java.lang.ArithmeticException
# You can also write a property so that those exceptions will only be considered as a failure. below is the property for that
# You have to pass an array of values to those ignore-exceptions and record-exceptions
#resilience4j.circuitbreaker.instances.sayHello.record-exceptions=java.lang.NullPointerException

# For more information about resilience4j refer this document : https://resilience4j.readme.io/docs/circuitbreaker
